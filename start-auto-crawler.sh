#!/bin/bash

# Divar Auto-Crawler Startup Script
# ÿß€åŸÜ ÿßÿ≥⁄©ÿ±€åŸæÿ™ ⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ± ÿ±ÿß ÿØÿ± ÿ≥ÿ±Ÿàÿ± ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ŸÖ€å‚Äå⁄©ŸÜÿØ

set -e

# ÿ±ŸÜ⁄Ø‚ÄåŸáÿß ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨€å
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å ŸÖÿ≠€åÿ∑€å
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$SCRIPT_DIR"
LOG_FILE="$PROJECT_DIR/auto-crawler.log"
PID_FILE="$PROJECT_DIR/auto-crawler.pid"
NODE_BIN="$(which node)"
NPM_BIN="$(which npm)"

# ÿ™Ÿàÿßÿ®ÿπ ⁄©ŸÖ⁄©€å
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ÿ®ÿ±ÿ±ÿ≥€å Ÿæ€åÿ¥‚ÄåŸÜ€åÿßÿ≤Ÿáÿß
check_prerequisites() {
    log_info "ÿ®ÿ±ÿ±ÿ≥€å Ÿæ€åÿ¥‚ÄåŸÜ€åÿßÿ≤Ÿáÿß..."
    
    # ÿ®ÿ±ÿ±ÿ≥€å Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js ŸÜÿµÿ® ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™!"
        exit 1
    fi
    
    # ÿ®ÿ±ÿ±ÿ≥€å npm
    if ! command -v npm &> /dev/null; then
        log_error "npm ŸÜÿµÿ® ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™!"
        exit 1
    fi
    
    # ÿ®ÿ±ÿ±ÿ≥€å Chrome
    if ! command -v google-chrome &> /dev/null; then
        log_error "Google Chrome ŸÜÿµÿ® ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™!"
        exit 1
    fi
    
    # ÿ®ÿ±ÿ±ÿ≥€å PostgreSQL
    if ! command -v psql &> /dev/null; then
        log_error "PostgreSQL ŸÜÿµÿ® ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™!"
        exit 1
    fi
    
    # ÿ®ÿ±ÿ±ÿ≥€å ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å Ÿæÿ±Ÿà⁄òŸá
    if [ ! -f "$PROJECT_DIR/package.json" ]; then
        log_error "ŸÅÿß€åŸÑ package.json €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!"
        exit 1
    fi
    
    log_success "ŸáŸÖŸá Ÿæ€åÿ¥‚ÄåŸÜ€åÿßÿ≤Ÿáÿß ÿ¢ŸÖÿßÿØŸá ÿßÿ≥ÿ™"
}

# ŸÜÿµÿ® Ÿàÿßÿ®ÿ≥ÿ™⁄Ø€å‚ÄåŸáÿß
install_dependencies() {
    log_info "ŸÜÿµÿ® Ÿàÿßÿ®ÿ≥ÿ™⁄Ø€å‚ÄåŸáÿß..."
    
    cd "$PROJECT_DIR"
    
    if [ ! -d "node_modules" ]; then
        log_info "ŸÜÿµÿ® npm packages..."
        npm install
    else
        log_info "ÿ®ÿ±ÿ±ÿ≥€å ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å npm packages..."
        npm update
    fi
    
    log_success "Ÿàÿßÿ®ÿ≥ÿ™⁄Ø€å‚ÄåŸáÿß ŸÜÿµÿ® ÿ¥ÿØŸÜÿØ"
}

# ÿ™ŸÜÿ∏€åŸÖ ÿØ€åÿ™ÿßÿ®€åÿ≥
setup_database() {
    log_info "ÿ™ŸÜÿ∏€åŸÖ ÿØ€åÿ™ÿßÿ®€åÿ≥..."
    
    cd "$PROJECT_DIR"
    
    # ÿßÿ¨ÿ±ÿß€å migrations
    log_info "ÿßÿ¨ÿ±ÿß€å database migrations..."
    npm run db:migrate
    
    # ÿßÿ¨ÿ±ÿß€å seeders
    log_info "ÿßÿ¨ÿ±ÿß€å database seeders..."
    npm run db:seed
    
    log_success "ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ™ŸÜÿ∏€åŸÖ ÿ¥ÿØ"
}

# ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥
check_service_status() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0 # ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿß ÿßÿ≥ÿ™
        else
            rm -f "$PID_FILE"
            return 1 # ÿ≥ÿ±Ÿà€åÿ≥ ŸÖÿ™ŸàŸÇŸÅ ÿ¥ÿØŸá ÿßÿ≥ÿ™
        fi
    fi
    return 1 # ŸÅÿß€åŸÑ PID Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ
}

# ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±Ÿà€åÿ≥
start_service() {
    log_info "ÿ¥ÿ±Ÿàÿπ ⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ±..."
    
    if check_service_status; then
        log_warning "ÿ≥ÿ±Ÿà€åÿ≥ ŸÇÿ®ŸÑÿßŸã ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿß ÿßÿ≥ÿ™ (PID: $(cat $PID_FILE))"
        return 0
    fi
    
    cd "$PROJECT_DIR"
    
    # ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ± Ÿæÿ≥‚Äåÿ≤ŸÖ€åŸÜŸá
    nohup "$NODE_BIN" src/auto-crawler.js > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # ÿ∞ÿÆ€åÿ±Ÿá PID
    echo "$pid" > "$PID_FILE"
    
    # ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ
    sleep 3
    
    # ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™
    if kill -0 "$pid" 2>/dev/null; then
        log_success "⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ± ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ (PID: $pid)"
        log_info "ŸÑÿß⁄Ø‚ÄåŸáÿß ÿØÿ± ŸÅÿß€åŸÑ: $LOG_FILE"
        log_info "ÿ®ÿ±ÿß€å ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß: tail -f $LOG_FILE"
    else
        log_error "ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±Ÿà€åÿ≥ ŸÜÿßŸÖŸàŸÅŸÇ ÿ®ŸàÿØ"
        rm -f "$PID_FILE"
        exit 1
    fi
}

# ÿ™ŸàŸÇŸÅ ÿ≥ÿ±Ÿà€åÿ≥
stop_service() {
    log_info "ÿ™ŸàŸÇŸÅ ⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ±..."
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        
        if kill -0 "$pid" 2>/dev/null; then
            log_info "ÿßÿ±ÿ≥ÿßŸÑ ÿ≥€å⁄ØŸÜÿßŸÑ ÿ™ŸàŸÇŸÅ ÿ®Ÿá PID: $pid"
            kill "$pid"
            
            # ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ÿ±ÿß€å ÿ™ŸàŸÇŸÅ
            local count=0
            while kill -0 "$pid" 2>/dev/null && [ $count -lt 30 ]; do
                sleep 1
                count=$((count + 1))
            done
            
            # ÿ®ÿ±ÿ±ÿ≥€å ŸÜŸáÿß€å€å
            if kill -0 "$pid" 2>/dev/null; then
                log_warning "ÿ≥ÿ±Ÿà€åÿ≥ ŸÖÿ™ŸàŸÇŸÅ ŸÜÿ¥ÿØÿå ÿßÿ±ÿ≥ÿßŸÑ SIGKILL..."
                kill -9 "$pid"
            fi
            
            rm -f "$PID_FILE"
            log_success "ÿ≥ÿ±Ÿà€åÿ≥ ŸÖÿ™ŸàŸÇŸÅ ÿ¥ÿØ"
        else
            log_warning "ÿ≥ÿ±Ÿà€åÿ≥ ŸÇÿ®ŸÑÿßŸã ŸÖÿ™ŸàŸÇŸÅ ÿ¥ÿØŸá ÿßÿ≥ÿ™"
            rm -f "$PID_FILE"
        fi
    else
        log_warning "ŸÅÿß€åŸÑ PID €åÿßŸÅÿ™ ŸÜÿ¥ÿØ"
    fi
}

# ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ŸÖÿ¨ÿØÿØ ÿ≥ÿ±Ÿà€åÿ≥
restart_service() {
    log_info "ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ŸÖÿ¨ÿØÿØ ⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ±..."
    stop_service
    sleep 2
    start_service
}

# ŸÜŸÖÿß€åÿ¥ Ÿàÿ∂ÿπ€åÿ™
show_status() {
    log_info "Ÿàÿ∂ÿπ€åÿ™ ⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ±:"
    echo "========================"
    
    if check_service_status; then
        local pid=$(cat "$PID_FILE")
        echo "‚úÖ Status: Running"
        echo "üÜî PID: $pid"
        echo "üìÅ PID File: $PID_FILE"
        echo "üìã Log File: $LOG_FILE"
        
        # ŸÜŸÖÿß€åÿ¥ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿ±ÿ¢€åŸÜÿØ
        if ps -p "$pid" > /dev/null; then
            echo "‚è±Ô∏è Uptime: $(ps -o etime= -p $pid)"
            echo "üíæ Memory: $(ps -o rss= -p $pid | awk '{print $1/1024 " MB"}')"
        fi
        
        # ŸÜŸÖÿß€åÿ¥ ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿßÿÆ€åÿ±
        if [ -f "$LOG_FILE" ]; then
            echo ""
            echo "üìã Recent logs (last 5 lines):"
            echo "----------------------------"
            tail -5 "$LOG_FILE" 2>/dev/null || echo "No logs available"
        fi
    else
        echo "‚ùå Status: Stopped"
        echo "üìÅ PID File: $PID_FILE"
        echo "üìã Log File: $LOG_FILE"
    fi
    
    echo "========================"
}

# ŸÜŸÖÿß€åÿ¥ ŸÑÿß⁄Ø‚ÄåŸáÿß
show_logs() {
    local lines=${1:-20}
    
    if [ -f "$LOG_FILE" ]; then
        log_info "ŸÜŸÖÿß€åÿ¥ $lines ÿÆÿ∑ ÿ¢ÿÆÿ± ŸÑÿß⁄Ø‚ÄåŸáÿß:"
        echo "========================"
        tail -n "$lines" "$LOG_FILE"
        echo "========================"
    else
        log_warning "ŸÅÿß€åŸÑ ŸÑÿß⁄Ø €åÿßŸÅÿ™ ŸÜÿ¥ÿØ"
    fi
}

# ÿ™ÿ≥ÿ™ ÿ≥ÿ±Ÿà€åÿ≥
test_service() {
    log_info "ÿ™ÿ≥ÿ™ ⁄©ÿ±ÿßŸàŸÑ ÿÆŸàÿØ⁄©ÿßÿ± (ÿßÿ¨ÿ±ÿß€å €å⁄©ÿ®ÿßÿ±Ÿá)..."
    
    cd "$PROJECT_DIR"
    
    # ÿßÿ¨ÿ±ÿß€å ÿ™ÿ≥ÿ™
    "$NODE_BIN" -e "
        require('./src/auto-crawler').performCrawl()
            .then(result => {
                console.log('‚úÖ Test completed successfully!');
                console.log('Result:', result);
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå Test failed:', error);
                process.exit(1);
            });
    "
}

# ŸÜŸÖÿß€åÿ¥ ÿ±ÿßŸáŸÜŸÖÿß
show_help() {
    echo "ü§ñ Divar Auto-Crawler Management Script"
    echo "======================================"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start     Start the auto-crawler service"
    echo "  stop      Stop the auto-crawler service"
    echo "  restart   Restart the auto-crawler service"
    echo "  status    Show service status"
    echo "  logs [n]  Show recent logs (default: 20 lines)"
    echo "  test      Test the auto-crawler (single run)"
    echo "  setup     Setup database and dependencies"
    echo "  help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 start"
    echo "  $0 status"
    echo "  $0 logs 50"
    echo "  $0 test"
    echo "  $0 setup"
    echo ""
    echo "Log file: $LOG_FILE"
    echo "PID file: $PID_FILE"
}

# ÿ™ÿßÿ®ÿπ ÿßÿµŸÑ€å
main() {
    local command="${1:-help}"
    
    case "$command" in
        start)
            check_prerequisites
            install_dependencies
            start_service
            ;;
        stop)
            stop_service
            ;;
        restart)
            check_prerequisites
            restart_service
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs "$2"
            ;;
        test)
            check_prerequisites
            install_dependencies
            test_service
            ;;
        setup)
            check_prerequisites
            install_dependencies
            setup_database
            log_success "Setup completed successfully!"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# ÿßÿ¨ÿ±ÿß€å ÿ™ÿßÿ®ÿπ ÿßÿµŸÑ€å
main "$@"
